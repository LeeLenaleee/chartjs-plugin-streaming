(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{486:function(n,t,a){"use strict";a.r(t);var e=a(19),o=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"add-some-delay"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-some-delay"}},[n._v("#")]),n._v(" Add some delay")]),n._v(" "),a("p",[n._v("The previous chart shows an issue. We cannot plot a line until the next data point is known. To get around this, we add a delay to the chart, so upcoming values are known before we need to plot the line.")]),n._v(" "),a("p",[n._v("This makes the chart look like a continual stream rather than very jumpy on the right hand side.")]),n._v(" "),a("chart-editor",{attrs:{code:"// <block:config>\nconst config = {\n  type: 'line',\n  data: {\n    datasets: [\n      {\n        data: []\n      },\n      {\n        data: []\n      }\n    ]\n  },\n  options: {\n    scales: {\n      x: {\n        type: 'realtime',\n        realtime: {\n          delay: 2000,\n          onRefresh: chart => {\n            chart.data.datasets.forEach(dataset => {\n              dataset.data.push({\n                x: Date.now(),\n                y: Math.random()\n              });\n            });\n          }\n        }\n      }\n    }\n  }\n};\n// </block:config>\n\nconfig.options.plugins = {\n  annotation: false,\n  datalabels: false,\n  zoom: false\n};\n\nmodule.exports = {\n  config: config\n};\n"}})],1)}),[],!1,null,null,null);t.default=o.exports}}]);