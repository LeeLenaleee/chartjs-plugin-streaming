(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{436:function(n,t,a){"use strict";a.r(t);var e=a(64),s=Object(e.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"push-data-feed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#push-data-feed"}},[this._v("#")]),this._v(" Push Data Feed")]),this._v(" "),t("chart-editor",{attrs:{code:"// <block:setup:1>\nconst data = {\n  datasets: [\n    {\n      label: 'Dataset 1 (Linear Interpolation)',\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      borderColor: Utils.CHART_COLORS.red,\n      borderDash: [8, 4],\n      data: []\n    },\n    {\n      label: 'Dataset 2 (Cubic Interpolation)',\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      borderColor: Utils.CHART_COLORS.blue,\n      cubicInterpolationMode: 'monotone',\n      data: []\n    }\n  ]\n};\n\nconst onReceive = function(event) {\n  this.data.datasets[event.index].data.push({\n    x: event.timestamp,\n    y: event.value\n  });\n  this.update('quiet');\n};\n\nconst timeoutIDs = [];\n\nconst startFeed = (chart, index) => {\n  var receive = () => {\n    onReceive.call(chart, {\n      index: index,\n      timestamp: Date.now(),\n      value: Utils.rand(-100, 100)\n    });\n    timeoutIDs[index] = setTimeout(receive, Utils.rand(500, 1500));\n  };\n  timeoutIDs[index] = setTimeout(receive, Utils.rand(500, 1500));\n};\n\nconst stopFeed = index => {\n  if (index === undefined) {\n    for (const id of timeoutIDs) {\n      clearTimeout(id);\n    }\n  } else {\n    clearTimeout(timeoutIDs[index]);\n  }\n};\n\nconst start = chart => {\n  startFeed(chart, 0);\n  startFeed(chart, 1);\n};\n\nconst stop = () => {\n  stopFeed();\n};\n// </block:setup>\n\n// <block:actions:2>\nconst actions = [\n  {\n    name: 'Randomize',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.forEach(dataObj => {\n          dataObj.y = Utils.rand(-100, 100);\n        });\n      });\n      chart.update();\n    }\n  },\n  {\n    name: 'Add Dataset',\n    handler(chart) {\n      const datasets = chart.data.datasets;\n      const dsColor = Utils.namedColor(datasets.length);\n      const newDataset = {\n        label: 'Dataset ' + (datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: []\n      };\n      datasets.push(newDataset);\n      chart.update();\n      startFeed(chart, datasets.length - 1);\n    }\n  },\n  {\n    name: 'Add Data',\n    handler(chart) {\n      onRefresh(chart);\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Dataset',\n    handler(chart) {\n      stopFeed(chart.data.datasets.length - 1);\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  },\n  {\n    name: 'Remove Data',\n    handler(chart) {\n      chart.data.datasets.forEach(dataset => {\n        dataset.data.shift();\n      });\n      chart.update();\n    }\n  }\n];\n// </block:actions>\n\n// <block:config:0>\nconst config = {\n  type: 'line',\n  data: data,\n  plugins: [\n    {\n      start: start,\n      stop: stop\n    }\n  ],\n  options: {\n    scales: {\n      x: {\n        type: 'realtime',\n        realtime: {\n          duration: 20000,\n          delay: 2000\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Value'\n        }\n      }\n    },\n    interaction: {\n      intersect: false\n    }\n  }\n};\n// </block:config>\n\nconfig.options.plugins = {\n  annotation: false,\n  datalabels: false,\n  zoom: false\n};\n\nmodule.exports = {\n  actions: actions,\n  config: config\n};\n"}})],1)}),[],!1,null,null,null);t.default=s.exports}}]);